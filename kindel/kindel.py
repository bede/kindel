import collections

import argh
import tqdm
import simplesam

from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord


def parse_records(bam_path):
    with open(bam_path, 'r') as bam_fh:
        records = simplesam.Reader(bam_fh)
        first_sq = list(records.header['@SQ'].values())[0] if '@SQ' in records.header else None
        ref_name = list(list(records.header.values())[0].keys())[0].replace('SN:','') if first_sq else 'aln'
        ref_len = int(next(iter(first_sq)).replace('LN:','')) if first_sq else 100000
        weights = [{'A':0,'T':0,'G':0,'C':0,'N':0} for p in range(ref_len)]
        clip_weights = [{'A':0,'T':0,'G':0,'C':0,'N':0} for p in range(ref_len)]
        insertions = [collections.defaultdict(int) for p in range(ref_len)]
        deletions = [0] * ref_len
        clip_starts = [[0] * (ref_len+1), [0] * (ref_len+1)] # Genome length lists for left- and right-clipped seqs
        for record in tqdm.tqdm(records):
            q_pos = 0 
            r_pos = record.pos-1 # Zero indexed genome coordinates
            for i, cigarette in enumerate(record.cigars):
                length, operation = cigarette
                if operation == 'M':
                    for pos in range(length):
                        q_nt = record.seq[q_pos].upper()
                        weights[r_pos][q_nt] += 1
                        r_pos += 1
                        q_pos += 1
                elif operation == 'I':
                    nts = record.seq[q_pos:q_pos+length].upper()
                    insertions[r_pos][nts] += 1
                    q_pos += length
                elif operation == 'D':
                    deletions[r_pos] += 1
                    r_pos += length
                elif operation == 'S':
                    if i == 0:
                        clip_starts[0][r_pos] += 1 # Count left-clipped start position
                        # MISSING â€“ left clipped bases should contribute to clip_weights
                    else:
                        clip_starts[1][r_pos] += 1 # Count right-clipped start position
                        for pos in range(length):
                            q_nt = record.seq[q_pos].upper()
                            if r_pos < ref_len:
                                clip_weights[r_pos][q_nt] += 1
                                r_pos += 1
                                q_pos += 1
                    q_pos += length
    return ref_name, weights, insertions, deletions, clip_starts, clip_weights


def gap_coords(weights, clip_starts, threshold_weight, min_depth):
    # Returns list of soft-clipped alignment gaps as tuples in format [(start_pos, end_pos)]
    gaps = []
    coverage = [sum(weight.values()) for weight in weights]
    gap_open = False
    for i, (c, l, r) in enumerate(zip(coverage, clip_starts[0], clip_starts[1])):
        threshold_weight_freq = max(c * threshold_weight, min_depth)
        if r > threshold_weight_freq and i:
            gap_start = i
            gap_open = True
        if gap_open and l > threshold_weight_freq and i:
            gap_end = i
            gaps.append((gap_start, gap_end))
            gap_open = False
    return gaps

def r_overhang_consensus(start_pos, clip_weights, min_depth):
    # Returns consensus sequence (string) of clipped reads at specified position
    consensus_overhang = ''
    max_overhang_len = 500 # Arbitrary figure greater than read length as safety net
    for pos in range(start_pos, start_pos+max_overhang_len):
        heaviest_base, heaviest_weight = max(clip_weights[pos].items(), key=lambda x:x[1])
        if heaviest_weight >= min_depth:
            consensus_overhang += heaviest_base
        else:
            break
    return consensus_overhang

def r_flanking_seq(start_pos, weights, min_depth):
    # Returns consensus sequence (string) flanking RHS of soft-clipped gaps
    r_flank_seq = ''
    for pos in range(start_pos, start_pos + 10):
        heaviest_base, heaviest_weight = max(weights[pos].items(), key=lambda x:x[1])
        if heaviest_weight >= min_depth:
            r_flank_seq += heaviest_base
    return r_flank_seq

def reconcile_gaps(weights, clip_weights, clip_starts, threshold_weight, min_depth):
    # Returns list of consensus strings corresponding to gap coordinates generated by gap_coords()
    gap_consensuses = []
    gaps = gap_coords(weights, clip_starts, threshold_weight, min_depth)
    for gap in gaps:
        r_overhang = r_overhang_consensus(gap[0], clip_weights, min_depth)
        r_flank_seq = r_flanking_seq(gap[0], weights, min_depth)
        index = r_overhang.find(r_flank_seq) # str.find() returns -1 in absence of match
    gap_consensuses.append(r_overhang[:index] if index >= 0 else None)
    return gaps, gap_consensuses


def consensus_sequence(weights, clip_weights, insertions, deletions,
                       gaps, gap_consensuses, threshold_weight, min_depth):
    consensus = ''
    changes = [None] * len(weights)
    gap_starts = [gap[0] for gap in gaps]
    skip_pos = False
    for pos, weight in enumerate(weights):
        ins_freq = sum(insertions[pos].values()) if insertions[pos] else 0
        del_freq = deletions[pos]
        coverage = sum(weight.values())
        threshold_weight_freq = coverage * threshold_weight
        if pos in gap_starts:
            gap_i = gap_starts.index(pos)
            consensus += gap_consensuses[gap_i]
            skip_pos = len(gap_consensuses[gap_i])
        elif skip_pos:
            skip_pos -= 1
            continue
        if del_freq > threshold_weight_freq:
            changes[pos] = 'D'
        elif coverage < min_depth:
            consensus += 'N'
            changes[pos] = 'N'
        else:
            consensus += max(weight, key=lambda k: weight[k])
        if ins_freq > threshold_weight_freq:
            top_ins, top_ins_freq = max(insertions[pos].items(), key=lambda x:x[1])
            consensus += top_ins
            changes[pos] = 'I'
    return consensus, changes


def consensus_seqrecord(consensus, ref_name):
    return SeqRecord(Seq(consensus), id=ref_name + '_cns', description='')


def report(weights, changes, threshold_weight, min_depth):
    coverage = [sum(weight.values()) for weight in weights] 
    ambiguous_sites = []
    insertion_sites = []
    deletion_sites = []
    for pos, change in enumerate(changes):
        if change == 'N':
            ambiguous_sites.append(str(pos))
        elif change == 'I':
            ambiguous_sites.append(str(pos+1))
        elif change == 'D':
            ambiguous_sites.append(str(pos))
    report = '========================= REPORT ===========================\n'
    report += 'consensus weight: {}\n'.format(threshold_weight)
    report += 'minimum depth: {}\n'.format(min_depth)
    report += 'min,max observed depth: {},{}\n'.format(min(coverage), max(coverage))
    report += 'ambiguous sites: {}\n'.format(', '.join(ambiguous_sites))
    report += 'insertion sites: {}\n'.format(', '.join(insertion_sites))
    report += 'deletion sites: {}\n'.format(', '.join(deletion_sites))
    report += '============================================================\n'
    return report


def bam_to_consensus_seqrecord(bam_path, threshold_weight=0.5, min_depth=1, reconcile_clips=False):
    ref_name, weights, insertions, deletions, clip_starts, clip_weights = parse_records(bam_path)
    gaps, gap_consensuses = reconcile_gaps(weights, clip_weights, clip_starts, threshold_weight, min_depth)
    print(gap_consensuses)
    consensus, changes = consensus_sequence(weights, clip_weights, insertions, deletions,
                                            gaps, gap_consensuses, threshold_weight, min_depth)
    consensus_record = consensus_seqrecord(consensus, ref_name)
    return consensus_record


def bam_to_consensus_fasta(bam_path: 'path to SAM/BAM file',
                           threshold_weight: 'consensus threshold weight'=0.5,
                           min_depth: 'substitute Ns at coverage depths beneath this value'=1,
                           reconcile_clips: 'attempt to reconcile reference at clipping boundaries'=False,
                           reconciliation_k: 'consecutive matching consensus bases required for gap closure'=12):
    consensus_fasta = bam_to_consensus_seqrecord(bam_path, threshold_weight, min_depth).format('fasta')
    return consensus_fasta


if __name__ == '__main__':
    argh.dispatch_command(bam_to_consensus_fasta)
